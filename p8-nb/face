//face
E.setFlags({pretokenise:1});
console.log("face start");
var button;    
var g=w.gfx;  

//clock
var clockFace = {
  offms: 5000,
  show : function(o){
    if (!this.run) return;
 
  var d=(Date()).toString().split(' ');
  var t=(d[4]).toString().split(':');
  var s=(t[2]).toString().split('');
  g.setColor(0);
  g.fillRect(0,60,100,155);
  g.setColor(15);
  //g.setFont("7x11Numeric7Seg",7);
  g.setFont("Vector",65);
  g.drawString(t[0],0,75); //hours
  g.setFont("Vector",45);
  g.drawString(":",96,85);
  g.flip();
  g.drawString(":",96,85);
//  g.setFont("7x11Numeric7Seg",7);
  g.setFont("Vector",65);
  g.setColor(0);g.fillRect(110,60,210,155);
  g.setColor(10);//
  g.drawString(t[1],118,75); //minutes
  g.setFont("Vector",35);
//  g.setFont("7x11Numeric7Seg",3);
  g.flip();
  g.setColor(0);g.fillRect(211,60,240,155);
  g.setColor(11);//
  g.drawString(s[0],222,77); //seconds
  g.drawString(s[1],222,118); //seconds
  g.flip();  
  //batt
  if (digitalRead(w.pin.CHARGING)==0)
    g.setColor(13);
  else 
    g.setColor(7);
  g.fillRect(162,0,239,50);//batt
  g.setColor(0);
  g.setFont("7x11Numeric7Seg",4);
  g.drawString(this.v,240-(g.stringWidth(this.v)),3); //batt
  g.flip();
  //euc
  if (euc.val.lock==1)  g.setColor(13);
  else if (euc.val.conn=="READY") g.setColor(9);
  else g.setColor(7);
  g.fillRect(162,200,239,239);
  g.setColor(0);
  g.setFont("Vector",28);
  g.drawString("EUC", 163 ,205); 
  g.flip();

    
  //loop
    this.tid=setTimeout(function(t,o){
      t.tid=-1;
      t.show(o);
    },1000-Date().getMilliseconds(),this,o);
  },
  tid:-1,
  run:false,
  init: function(){
    var d=(Date()).toString().split(' ');
    this.v=(w.battVoltage()*100-365)*2|0;
    g.setColor(7);
    g.fillRect(0,0,158,50); //date
    g.fillRect(162,0,239,50);//batt
    g.fillRect(0,200,78,239); //bottom
    g.fillRect(82,200,158,239); //bottom
    g.fillRect(162,200,239,239); //bottom
    g.setColor(0);
    g.setFont("Vector",28);
    g.drawString(mem(), 0 ,205); //memmory
    g.drawString("EUC", 163 ,205); //euc
    g.setFont("Vector",35);
    g.drawString(d[2]+" "+d[0], (79-(g.stringWidth(d[2]+" "+d[0]))/2) ,5); //date
    g.setFont("7x11Numeric7Seg",4);
    g.drawString(this.v,240-(g.stringWidth(this.v)),3); //batt
    g.flip();
    if(!g.isOn) g.on();
    this.run=true;
  },
  clear : function(o){
    g.clear();
    this.exit(o);
    return true;
  },
  exit: function(o){
    this.run=false;
    if (this.tid>=0) clearTimeout(this.tid);
    this.tid=-1;
//    g.clear();
 //   g.flip();
    return true;
  },
  off: function(o){
    g.off();
    this.clear(o);
  }
};
//Euc main face
var EucMain = {
  offms: 15000, //15 sec timeout
  show : function(o){
  if (!this.run) return;
  if (euc.val.conn=="READY") {
    //speed 1
    if (euc.val.speed[0]!=euc.tmp.speed[0]){
      euc.tmp.temp0=euc.val.speed[0];
        if (euc.val.speedCol!=0) {
		  g.setColor(euc.val.speedCol);
          g.fillRect(0,54,135,154);
          g.setColor(0);
        }else { 
		  g.setColor(0);
          g.fillRect(0,54,135,154);
          g.setColor(15);
        }
        if (euc.val.speed[0]==0) {   
	      g.setFontVector(18);
          g.drawString("AV.SPEED",12,60);
	      g.setFont("7x11Numeric7Seg",5);
	      g.drawString(euc.val.aver,(139-(g.stringWidth(euc.val.aver)))/2,90); 
          g.flip();
        }else{
          g.setFontVector(90);
          g.drawString(euc.val.speed[0],(135-(g.stringWidth(euc.val.speed[0])))/2,55); 
          euc.tmp.speed[0]=euc.val.speed[0];
          g.flip();
        }
    }
      //Amp
    if ((euc.val.amp|0)!=euc.tmp.amp) {
        euc.tmp.amp=(euc.val.amp|0);
        if  (euc.val.ampCol!=0 ) {
		  g.setColor(euc.val.ampCol);
          g.fillRect(139,54,239,154); 
          g.setColor(0);
        }else { 
		  g.setColor(0);
          g.fillRect(139,54,239,154); 
          g.setColor(15);
        }
        
        if (((euc.val.amp|0)==0 && euc.val.speed[0]==0) ||  euc.val.lock==1) {  
	      g.setFontVector(18);
	      g.drawString("RunTIME",141,60);
	      g.setFont("7x11Numeric7Seg",5);
  	      g.drawString(euc.val.time,192-(g.stringWidth(euc.val.time)/2),90); 
          g.flip();
        }else{
          g.setFont("7x11Numeric7Seg",6);
          g.drawString(euc.val.amp|0,(142+(100-g.stringWidth(euc.val.amp|0))/2),73); 
          g.flip();
        }    
    }
    //Temp
    if (euc.val.temp!=euc.tmp.temp) {
      euc.tmp.temp=euc.val.temp;
	  g.setColor(euc.val.tempCol);
      g.fillRect(0,0,135,50);       
      g.setColor(0);
      g.setFont("7x11Numeric7Seg",4);
      g.drawString(euc.val.temp, 10,3); //temp
      g.flip();
    }
    //Battery
    if (euc.val.batt!=euc.tmp.batt) {
   	  euc.tmp.batt=euc.val.batt;
	  g.setColor(euc.val.battCol);
      g.fillRect(139,0,239,50);
      g.setColor(0);
      g.setFont("7x11Numeric7Seg",4);
      g.drawString(euc.val.batt,240-(g.stringWidth(euc.val.batt)+10),3); //fixed bat
      g.flip();
    }
    //Mileage
	if (euc.val.tripNow!=euc.tmp.tripNow) {
	  euc.tmp.tripNow=euc.val.tripNow;
	  g.setColor(0);
	  g.fillRect(0,194,239,239);
      g.setColor(11);
	  g.setFont("7x11Numeric7Seg",3);
   	  g.drawString(euc.val.tripNow,0,205); 
	  g.drawString(euc.val.tripTotal,(240-(g.stringWidth(euc.val.tripTotal)))/2,205); 
	  g.drawString(euc.val.tripLeft,240-(g.stringWidth(euc.val.tripLeft)+1),205); 
	  g.flip();
    }     
  // diconnected  
  } else if (euc.val.conn=="OFF")  {
    g.setColor(7);
    g.fillRect(0,54,135,154);
    g.setColor(0);
    g.setFontVector(18);
    g.drawString("AV.SPEED",12,60);
    g.setFont("7x11Numeric7Seg",5);
    g.drawString(euc.val.aver,(139-(g.stringWidth(euc.val.aver)))/2,90); 
    g.flip();
    if (euc.val.lock==1) g.setColor(13);
    else  g.setColor(7);
    g.fillRect(139,54,239,154); 
    g.setColor(0); 
	g.setFontVector(18);
	g.drawString("RunTIME",141,60);
	g.setFont("7x11Numeric7Seg",5);
  	g.drawString(euc.val.time,192-(g.stringWidth(euc.val.time)/2),90); 
    g.flip();
  
      
/*      
    }else {
      g.setColor(0);
      g.fillRect(139,54,239,154); 
      g.setColor(7);
      g.setFont("Vector",35);
      g.drawString("OFF",142,85);
      g.flip();
    }  
*/
  // rest
  } else  {
    g.setColor(7);
	g.fillRect(0,54,135,154);
	g.setColor(0);
	g.setFontVector(18);
    g.drawString("AV.SPEED",12,60);
	g.setFont("7x11Numeric7Seg",5);
	g.drawString(euc.val.aver,(139-(g.stringWidth(euc.val.aver)))/2,90); 
    g.flip();
    g.fillRect(139,54,239,154); 
    g.setColor(15);     
    g.setFont("Vector",30);
    g.drawString(euc.val.conn,(142+(100-g.stringWidth(euc.val.conn))/2),85);
    g.flip();
    g.setColor(7);
    g.fillRect(0,0,135,50);
    g.fillRect(139,0,239,50);
    g.setColor(0);
    g.setFont("7x11Numeric7Seg",4);
    g.drawString(euc.val.temp, 10,3); //temp
    g.drawString(euc.val.batt,240-(g.stringWidth(euc.val.batt)+10),3);    
    g.flip();
  }
  // refresh 
  this.tid=setTimeout(function(t,o){
      t.tid=-1;
      t.show(o);
    },100,this,o);
  },
  tid:-1,
  run:false,
  clear : function(o){
    g.clear();
    this.exit(o);
    return true;
  },
  exit: function(o){

    this.run=false;
    if (this.tid>=0) clearTimeout(this.tid);
    this.tid=-1;
    return true;
  },
  off: function(o){
    g.off();
    this.clear(o);
  }, 
  init: function(){
    
    g.setColor(7);
    g.fillRect(0,0,135,50); //temp
    g.fillRect(139,0,239,50); //batt      
    g.fillRect(0,158,239,193); //mileage
    g.setColor(0);
    g.setFont("7x11Numeric7Seg",4);
    g.drawString(euc.val.temp, 10,3); //temp
    g.drawString(euc.val.batt,240-(g.stringWidth(euc.val.batt)+10),3); //fixed bat
    g.setFontVector(20); //mileage
    g.drawString("TRIP",1,164); 
    g.drawString("TOTAL",80,164); 
    g.drawString("LEFT",176,164); 
    g.flip();
    //mileage
    g.fillRect(0,194,239,239);
    if (euc.val.conn=="READY") g.setColor(11);
	else g.setColor(7);    
    g.setFont("7x11Numeric7Seg",3);
    g.drawString(euc.val.tripNow,0,205); 
    g.drawString(euc.val.tripTotal,(240-(g.stringWidth(euc.val.tripTotal)))/2,205); 
    g.drawString(euc.val.tripLeft,240-(g.stringWidth(euc.val.tripLeft)+1),205); 
    g.flip();

    euc.tmp.speed[0]="-1";
    euc.tmp.speed[1]="-1";
    euc.tmp.amp="-1";
    euc.tmp.temp="-1";
    euc.tmp.batt="-1";
    euc.tmp.tripNow="-1";
    if(!g.isOn) g.on();
    this.run=true;
   }
};
var w_up=false;
var press=true;
var dbl=0;
var offid=-1;
var offms=5000;
var fcurr=-1;
var fprev=-1;
var faces = [
  clockFace,
  EucMain,
//  nb_Info,
];
function buttonHandler(s){
//  console.log("button in");
//  console.log("state :", s.state);
  clearWatch(button);
  // button down
if (s.state==true) { 
    if (typeof l2 !== "undefined") {clearTimeout(l2);}
    if (typeof l3 !== "undefined") {clearTimeout(l3);}
    if (typeof offid !== "undefined") {clearTimeout(offid);}
//    console.log("button down");
    press=true;
	if ( fcurr!=-1) {
    //reset on long press
	l2=setTimeout(() => {
		console.log("l2",l2);
        if (digitalRead(BTN)==1) {
        console.log("reseting");
        w.vibrate(0.85,2,80,200); 
        NRF.setServices({},{uart:false});
        NRF.setServices({},{uart:true});  
		l2=setTimeout(() => {reset();}, 1000);
	    }
    }, 5000);
	}
    if ( fcurr==1) {
    //reset milleage long press
	l3=setTimeout(() => {
    	console.log("l3",l3);
        if (digitalRead(BTN)==1) {
        console.log("reset mileage");
        w.vibrate(0.85,1,200,50); 
        euc.val.tripLast=0;
	    }
    }, 3000);
	}
    offid=setTimeout(() => {
      //euc off
      if (euc.tmp.gatt.connected || euc.val.conn!="OFF" ) {
        w.vib(90); 
        euc.off();
        if (fcurr!=-1){
          if (fcurr==1) faces[fcurr].exit();
          else faces[fcurr].clear();
        }
          fcurr=1;
        faces[fcurr].init();
        faces[fcurr].show(g);
        offid=setTimeout(() => { faces[fcurr].off();fcurr=-1; }, 2500);
        NRF.setTxPower(0);
        //euc on
      } else if (!euc.tmp.gatt.connected && euc.val.conn=="OFF") {
        w.vib(150); 
        euc.on();  
        if (fcurr!=-1){
          if (fcurr==1) faces[fcurr].exit();
          else faces[fcurr].clear();
        }
        fcurr=1;
        faces[fcurr].init();
        faces[fcurr].show(g);
        offid=setTimeout(() => { faces[fcurr].off();fcurr=-1; }, 8000);
      }
      press=false;
    }, 1000);
    button=setWatch(buttonHandler,BTN1, {repeat:false,debounce:10,edge:-1});
    return;
}else if (press==true && s.state==false)  { 
    if (typeof l2 !== "undefined") {clearTimeout(l2);}
    if (typeof l3 !== "undefined") {clearTimeout(l3);}
    if (typeof offid !== "undefined") {clearTimeout(offid);}
      press=false;
	  var fshow=1;
      if (fcurr<0){
        fprev=fcurr;
        fcurr=0;
        if (euc.val.conn!="OFF") fcurr=1;  
        if (faces[fcurr].init) faces[fcurr].init();
      } else {
        if (!faces[fcurr].clear || faces[fcurr].clear()){
          fprev=fcurr;
          if(g.isOn) {
            fcurr++; 
            if (fcurr >= faces.length) fcurr=0;
          } else fcurr=0;
            if (faces[fcurr].init) faces[fcurr].init();
          } else fshow=0;
      }
      if (offid>=0) clearTimeout(offid);
      var foffms=faces[fcurr].offms;
      offid=setTimeout((f)=>{
        if (f>=0 && faces[f].off) faces[f].off();
        g.off();offid=-1;fcurr=-1;
      },(foffms>0)?foffms:offms,fcurr);
      if (fshow) {
      faces[fcurr].show(); 
      }
} else {
	delete global["\xFF"].timers[l2];
    delete global["\xFF"].timers[l3];
    delete global["\xFF"].timers[offid];
}	
    button=setWatch(buttonHandler,BTN1, {repeat:false,debounce:10,edge:1});
}

button=setWatch(buttonHandler,BTN1, {repeat:false, debounce:10,edge:1});
//eval(require('Storage').read('face'));
//  g.setColor(1); //
//  g.setColor(2);// Dgreen
//  g.setColor(3);// Dgrey
//  g.setColor(4);// Dred
//  g.setColor(5);// Dpurple
//  g.setColor(6);// Dorange
//  g.setColor(7); //grey
//  g.setColor(8);// Dark
//  g.setColor(9); //Dblue
//  g.setColor(10);// green
//  g.setColor(11);// blue
//  g.setColor(12);// red
//  g.setColor(13);// purple
//  g.setColor(14);// yellow
//  g.setColor(15);// white
console.log("face end");
