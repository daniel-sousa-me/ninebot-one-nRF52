E.setFlags({pretokenise:0});
Modules.addCached("euc",function(){
  
const val = {
  speed: ["0","0"], 
  speedCol:0,
  amp: "0", 
  ampCol: 0, 
  batt: "0", 
  battCol: 10, 
  temp: "0.0", 
  tempCol: 10, 
  tripCol: 0, 
  tripNow: "0.0", 
  tripLast: "0.0", 
  tripTotal: "0.0", 
  tripLeft: "0.0",
  aver:"0.0",
  ridemode:0,
  time:"0",
  lock: -1,
  alarm: 0,
  conn: "OFF",
  alock: true,
  far: 83,
  near: 65,
  mac: "20:91:48:4c:49:d1 public", //enaon
//  mac: "88:C2:55:32:F6:5B public", //manowar
//  mac: "20:91:48:AB:2A:AD public", //megadeath
//  mac: "20:91:48:BC:91:3B public", //poet
};

const alert = {
  speed: 23,
  temp: 60,
  batt: 20,
  ampHigh: 18,
  ampLow: -6,
  on: false,
};


const tmp = {
  speed: ["0","0"], 
  amp: "0", 
  temp: "0", 
  count:"0",
  batt: "0", 
  tripNow: "0",
  cmd: false,
  loop:-1,
  reconnect:-1,
  rssi:"",
  gatt:0,
  service:0,
  characteristic:0,
};

/*
const cmd= {
	
    0:'[85,170,3,9,1,80,2,160,255]', //Current Amperage with sign if v[80] > 32768 I = v[80] - 65536 else I = v[80] in Amperes * 100
    1:'[85,170,3,9,1,38,2,202,255]', //Current Speed in Km/h*1000d
    2:'[85,170,3,9,1,62,2,178,255]', //Temperature numeric positive ยบC * 10
    3:'[85,170,3,9,1,80,2,160,255]', //amp
    4:'[85,170,3,9,1,38,2,202,255]', //speed
    5:'[85,170,3,9,1,71,2,169,255]', //Voltage numeric positive V * 100
    6:'[85,170,3,9,1,80,2,160,255]', //amp
    7:'[85,170,3,9,1,38,2,202,255]', //speed
   	8:'[85,170,3,9,1,185,2,55,255]', //Single Mileage numeric positive in meters
    9:'[85,170,3,9,1,80,2,160,255]', //amp 
    10:'[85,170,3,9,1,38,2,202,255]', //speed
	11:'[85,170,3,9,1,58,2,182,255]', //Single Runtime numeric positive seconds
	12:'[85,170,3,9,1,80,2,160,255]', //amp 
    13:'[85,170,3,9,1,38,2,202,255]', //speed
	14:'[85,170,3,9,1,37,2,203,255]', //remaining mileage in Km*100
	15:'[85,170,3,9,1,80,2,160,255]', //amp 
    16:'[85,170,3,9,1,38,2,202,255]', //speed
	17:'[85,170,3,9,1,1822,58,255]', //Average speed numeric positive m/h
	18:'[85,170,3,9,1,80,2,160,255]', //18-amp 
    19:'[85,170,3,9,1,38,2,202,255]', //19-speed
	20:'[85,170,3,9,1,112,2,128,255]', //Lock status
//	'[85,170,3,9,1,178,1,63,255]', //20-Flags bit 0 -> Limit Speed, bit 1 -> Lock , bit 2 -> Beep, bit 11 -> Activation. Bits from lower significance
	21:'[85,170,3,9,3,112,1,127,255]', //21- lock
    22:'[85,170,3,9,3,112,0,128,255]',  //22- unlock
	23:'[85,170,3,9,1,210,2,30,255]', //23 get Riding Mode
	24:'[85,170,4,9,2,210,0,0,30,255]', //24 set Riding Mode 0
	25:'[85,170,4,9,2,210,0,0,30,255]', //25 set Riding Mode 1
	26:'[85,170,4,9,2,210,0,0,30,255]', //26 set Riding Mode 2
	27:'[85,170,4,9,2,210,0,0,30,255]', //27 set Riding Mode 3
	28:'[85,170,4,9,2,210,0,0,30,255]', //28 set Riding Mode 4
	29:'[85,170,4,9,2,210,0,0,30,255]', //29 set Riding Mode 5
	30:'[85,170,4,9,2,210,0,0,30,255]', //30 set Riding Mode 6
	31:'[85,170,4,9,2,210,0,0,30,255]', //31 set Riding Mode 7
	32:'[85,170,4,9,2,210,0,0,30,255]', //32 set Riding Mode 8
	33:'[85,170,4,9,2,210,0,0,30,255]' //33 set Riding Mode 8
};
*/ 

const cmd = [
    '[85,170,3,9,1,80,2,160,255]', //Current Amperage with sign if v[80] > 32768 I = v[80] - 65536 else I = v[80] in Amperes * 100
    '[85,170,3,9,1,38,2,202,255]', //Current Speed in Km/h*1000d
    '[85,170,3,9,1,62,2,178,255]', //Temperature numeric positive ยบC * 10
    '[85,170,3,9,1,80,2,160,255]', //amp
    '[85,170,3,9,1,38,2,202,255]', //speed
    '[85,170,3,9,1,71,2,169,255]', //Voltage numeric positive V * 100
    '[85,170,3,9,1,80,2,160,255]', //amp
    '[85,170,3,9,1,38,2,202,255]', //speed
   	'[85,170,3,9,1,185,2,55,255]', //Single Mileage numeric positive in meters
    '[85,170,3,9,1,80,2,160,255]', //amp 
    '[85,170,3,9,1,38,2,202,255]', //speed
	'[85,170,3,9,1,58,2,182,255]', //Single Runtime numeric positive seconds
	'[85,170,3,9,1,80,2,160,255]', //amp 
    '[85,170,3,9,1,38,2,202,255]', //speed
	'[85,170,3,9,1,37,2,203,255]', //remaining mileage in Km*100
	'[85,170,3,9,1,80,2,160,255]', //amp 
    '[85,170,3,9,1,38,2,202,255]', //speed
	'[85,170,3,9,1,182,2,58,255]', //Average speed numeric positive m/h
	'[85,170,3,9,1,80,2,160,255]', //18-amp 
    '[85,170,3,9,1,38,2,202,255]', //19-speed
	'[85,170,3,9,1,112,2,128,255]', //Lock status
//	[85,170,3,9,1,178,1,63,255], //20-Flags bit 0 -> Limit Speed, bit 1 -> Lock , bit 2 -> Beep, bit 11 -> Activation. Bits from lower significance
	'[85,170,3,9,3,112,1,127,255]', //21- lock
    '[85,170,3,9,3,112,0,128,255]',  //22- unlock
	'[85,170,3,9,1,210,2,30,255]', //23 get Riding Mode
	'[85,170,4,9,2,210,0,0,30,255]', //24 set Riding Mode 0
	'[85,170,4,9,2,210,1,0,29,255]', //25 set Riding Mode 1
	'[85,170,3,9,2,210,2,29,255]', //26 set Riding Mode 2
	'[85,170,3,9,2,210,3,28,255]', //27 set Riding Mode 3
	'[85,170,3,9,2,210,4,27,255]', //28 set Riding Mode 4
	'[85,170,3,9,2,210,5,26,255]', //29 set Riding Mode 5
	'[85,170,3,9,2,210,6,25,255]', //30 set Riding Mode 6
	'[85,170,3,9,2,210,7,24,255]', //31 set Riding Mode 7
	'[85,170,3,9,2,210,8,23,255]', //32 set Riding Mode 8
	'[85,170,3,9,2,210,9,22,255]'  //33 set Riding Mode 9
];

function stop(){ 
	if (global["\xFF"].timers[tmp.reconnect] != "undefined" ||  val.conn=="WAIT" || val.conn=="ON") {
      clearInterval(tmp.loop);
      clearTimeout(tmp.reconnect);
      delete global["\xFF"].bleHdl;
	  delete tmp.characteristic;
	  delete tmp.service;
      delete tmp.gatt.device;
   	  if (tmp.rssi != "") {delete euc.tmp.gatt["#onblerssi"];} 
	  delete global.BluetoothRemoteGATTCharacteristic;
   	  delete global.BluetoothRemoteGATTService;    
      delete global.BluetoothRemoteGATTServer;    
      delete global.BluetoothDevice;       
      delete global.DataView;       
      delete global.Promise;    }
  	val.conn="OFF";

}

function start(){ 
  NRF.setTxPower(4);
  if (val.conn == "OFF") tmp.count=22; else tmp.count=0;  //unlock
  val.conn="ON";
  connect();
}
  
function connect(){
var euc_var;
var euc_al;
var euc_al_s;
var euc_al_a;
var euc_al_t;
var euc_al_b;
var tt=0;
var ts=0;
var ta=0;
var tr=0;
var tb=0;
var te=0; 
var tv=0; 
var tm=0; 
tmp.speed[0]="-1";
tmp.speed[1]="-1";
tmp.amp="-1";
tmp.temp="-1";
tmp.batt="-1";
tmp.tripNow="-1";  
val.speedCol=0;
tmp.rssi="";


if (tmp.gatt.connected) {console.log("already running"); return;} 
NRF.connect(val.mac,{minInterval:7.5, maxInterval:7.5})
.then(function(g) {
  tmp.gatt = g;
  return tmp.gatt.getPrimaryService(0xffe0);
}).then(function(service) {
  tmp.service=service;
  return tmp.service.getCharacteristic(0xffe1);
}).then(function(characteristic) {
  tmp.characteristic=characteristic;
  tmp.characteristic.on('characteristicvaluechanged', function(event) {
  euc_var = event.target.value.getUint8(5, true);
  // if off button is pressed on euc
  if (euc_var==0) {
      //console.log("EUC_switched off");
	  val.conn="WAIT";
	  digitalPulse(w.pin.MOTOR,0,200);
//      setTimeout(() => { connect();}, 2500);
      return;
  //alarm
  }else if (euc_var==178) {
	  tmp[euc_var] = event.target.value.getUint8(6, true);

/*     if (Number(euc_val).toString(2)[1]==1 &&  euc_alarm==0) {
        euc_alarm=1; 
        //console.log("EUC_alarm :",euc_val);
        digitalPulse(w.pin.MOTOR,0,[250,50,250,50,250]);
		if (fcurr==-1) {
			g.clear();	
            g.setFontVector(30);
			g.drawString("!",9, 30);
			g.flip();g.on();
			offid=setTimeout(() => {g.off();}, 2000);
		}
	    setTimeout(() => { euc_alarm=0; }, 100);
      }
*/
//  }else if (euc_var==210) {
//	tmp[euc_var] = event.target.value.getUint8(6, true);
//    val.ridemode=tmp[euc_var];
  // rest
  }else  {  
    tmp[euc_var]=event.target.value.getUint16(6, true);
    euc_al=0;
	//speed
	if (euc_var==38 && tmp[euc_var]!=ts) {
      val.speed=(tmp[euc_var]/1000).toFixed(1).toString().split('.');
		euc_al_s=false;	  
	  if (val.speed[0]>=alert.speed) {
		if (euc.val.speed[0]>=euc.alert.speed+5) val.speedCol=12;	
		else if (euc.val.speed[0]>=euc.alert.speed+2) val.speedCol=14;
		else val.speedCol=15;
		euc_al=(1+(val.speed[0]|0)-alert.speed);
		euc_al_s=true;
      } else val.speedCol=0;
      ts=tmp[euc_var];
    //amp
    }else  if (euc_var==80 && tmp[euc_var]!=ta) {
      if (tmp[80]>32768) val.amp=((tmp[80]-65536)/100).toFixed(1); 
      else val.amp=(tmp[euc_var]/100).toFixed(1);
	  euc_al_a=false;
	  if (val.amp>=alert.ampHigh) {
		if  (val.amp>=alert.ampHigh+5 ) val.ampCol=12;
		else val.ampCol=14;
		euc_al=(euc_al+1+(val.amp-alert.ampHigh))|0;
		euc_al_a=true;
	  }else if (val.amp>=10) { val.ampCol=13;
	  }else if ( val.amp<=alert.ampLow) {
		if  (val.amp<=alert.ampLow-5 ) val.ampCol=12;
		else  val.ampCol=14;
		euc_al=(euc_al+1+(-(val.amp-alert.ampLow)))|0;      
		euc_al_a=true;
	  }else if (val.amp<0) val.ampCol=15; else val.ampCol=0;
      ta=tmp[euc_var];
	//trip
    }else if (euc_var==185 && tmp[euc_var]!=tt) {
      if (val.tripNow > (tmp[euc_var]/100).toFixed(1)) {
        val.tripLast=Number(val.tripLast)+Number(val.tripNow);
        console.log("EUC_trip new :",val.tripLast);
      } 
      val.tripNow=(tmp[euc_var]/100).toFixed(1);
	  val.tripTotal=Number(val.tripLast)+Number(val.tripNow);
      tt=tmp[euc_var];
    //battery fixed
    }else  if (euc_var==71 && tmp[euc_var]!=tb) {
      val.batt=(((tmp[euc_var]/100)-51.5)*10|0); 
	  euc_al_t=false;
	  if ((euc.val.batt) >= 70) val.battCol=11;
      else  if ((val.batt) >= 40) val.battCol=13;
      else  if ((val.batt) >= alert.batt) val.battCol=14;
      else  {
		val.battCol=12;
		euc_al++;
		euc_al_b=true;
	  }
      tb=tmp[euc_var];
    //remaining
    }else if (euc_var==37 && tmp[euc_var]!=tr) {
      val.tripLeft=(tmp[euc_var]/100).toFixed(1);
      tr=tmp[euc_var];
     //temp
    }else if (euc_var==62 && tmp[euc_var]!=te) {
      val.temp=(tmp[euc_var]/10).toFixed(1);
      if (val.temp>=alert.temp ) {
		if (val.temp>=65) val.tempCol=12;
		else val.tempCol=14;
		euc_al++;
		euc_al_t=true;
	  } else if (val.temp>=50 ) val.tempCol=13; else val.tempCol=11;	  
      te=tmp[euc_var];
	 //average
    }else if (euc_var==182 && tmp[euc_var]!=tv) {
      val.aver=(tmp[euc_var]/1000).toFixed(1);
      tv=tmp[euc_var];
    }//runtime
    else if (euc_var==58 && tmp[euc_var]!=tm) {
      val.time=(tmp[euc_var]/60).toFixed(0);
      tm=tmp[euc_var];
	}//riding Mode
	else if (euc_var==210 ) {
	  if (tmp[euc_var] >=10) ) digitalPulse(w.pin.MOTOR,0,[100,80,100]);  
	  else val.ridemode=tmp[euc_var];
    } //lock
    else if (euc_var==112 && tmp[euc_var]!=val.lock) {
      val.lock=tmp[euc_var];
	  if (val.lock==1) {
		val.speedCol="13";
		val.ampCol="13";
		val.tempCol="13";
		val.battCol="13";
        tmp.speed[0]="-1";
		tmp.amp="-1";
		tmp.temp="-1";
		tmp.batt="-1";
		tmp.tripNow="-1";
      }else {
		 val.speedCol="0";
		val.ampCol="0";
		val.tempCol="11";
		val.battCol="11";
		tmp.speed[0]="-1";
		tmp.amp="-1";
		tmp.temp="-1";
		tmp.batt="-1";
		tmp.tripNow="-1";
      }
    }
	//alerts
      if (euc_al!=0 && alert.on!=true) {  
         alert.on=true;
		var a=[200];
		var i;
		for (i = 1; i < euc_al ; i++) {
			a.push(150,100);
		}
        digitalPulse(w.pin.MOTOR,0,a);  
        setTimeout(() => {alert.on=false; }, 2000);
      }
    }
	});
  return tmp.characteristic.startNotifications();
}).then(function() {
  tmp.gatt.device.on('gattserverdisconnected', function(reason) {
    console.log("Disconnected :",reason);
    if (val.conn!="OFF") {  
	 console.log("restarting");
     val.conn="WAIT"; 
     setTimeout(() => {  connect(); }, 1000);
    }else {
            delete global["\xFF"].bleHdl;
	  delete euc.tmp.characteristic;
	  delete euc.tmp.service;
      delete euc.tmp.gatt.device;
   	  delete euc.tmp.gatt["#onblerssi"]; 
	  delete global.BluetoothRemoteGATTCharacteristic;
   	  delete global.BluetoothRemoteGATTService;    
      delete global.BluetoothRemoteGATTServer;    
      delete global.BluetoothDevice;       
      delete global.DataView;       
      delete global.Promise;
    }
  });
//connected 
  console.log("EUC connected"); 
  val.conn="READY"; //connected
  digitalPulse(w.pin.MOTOR,0,150);
  startWriting();
//reconect
}).catch(function(err)  {
  console.log("EUC", err);
  clearInterval(tmp.loop);
  if (val.conn!="OFF") {
    console.log("not off");
    if ( err==="Connection Timeout"  )  {
	  if (typeof global["\xFF"].timers[tmp.reconnect] !== "undefined") clearTimeout(tmp.reconnect); 
	  console.log("retrying :timeout");
	  val.conn="LOST";
	  if (euc.val.lock==1) digitalPulse(w.pin.MOTOR,0,250);
	  else digitalPulse(w.pin.MOTOR,0,[250,200,250,200,250]);
	  tmp.reconnect=setTimeout(() => {
	    connect(); 
	  }, 10000);
	}else if ( err==="Disconnected"|| err==="Not connected")  {
	  if (typeof global["\xFF"].timers[tmp.reconnect]  !== "undefined") clearTimeout(tmp.reconnect); 
      console.log("retrying :",err);
      val.conn="FAR";
	  if (euc.val.lock==1) digitalPulse(w.pin.MOTOR,0,100);
	  else digitalPulse(w.pin.MOTOR,0,[100,150,100]);
      tmp.reconnect=setTimeout(() => {
	    connect(); 
      }, 5000);
    }
  }
});
}

//main loop
function startWriting() {
 
  var euc_still_tmr=0;
  var euc_still=false;
  var busy = false;
  var euc_near=0;
  var euc_far=0;
//  tmp.gatt.setRSSIHandler(function(rssi) { tmp.rssi=rssi; });
  //gatt.setRSSIHandler();
  if (typeof tmp.loop !== "undefined") {clearTimeout(tmp.loop);}
  tmp.loop = setInterval(function() {
    if (busy  ) return;
    if (val.conn!="READY") {
      //setTimeout(clearInterval,10,tmp.loop);
	  busy = true;
      if (val.conn=="OFF"){
	  tmp.characteristic.writeValue(eval(cmd[21])).then(function() {
   		val.lock=1;
        digitalPulse(w.pin.MOTOR,0,120);
        tmp.gatt.disconnect();
      delete global["\xFF"].bleHdl;
	  delete euc.tmp.characteristic;
	  delete euc.tmp.service;
      delete euc.tmp.gatt.device;
   	  delete euc.tmp.gatt["#onblerssi"]; 
	  delete global.BluetoothRemoteGATTCharacteristic;
   	  delete global.BluetoothRemoteGATTService;    
      delete global.BluetoothRemoteGATTServer;    
      delete global.BluetoothDevice;       
      delete global.DataView;       
      delete global.Promise;
      });
      clearInterval(tmp.loop);
      //setTimeout(tmp.gatt.disconnect,1000);  
      return;
      }  
    }
	//check if still
    if (val.speed[0]==0 && euc_still==false) {
      euc_still=3;
      //if (typeof euc_still_tmr !== "undefined") {clearTimeout(euc_still_tmr);}
      euc_still_tmr=(setTimeout(() => { 
        euc_still=true;
      },5000));
    }else if (val.speed[0]>=1 && euc_still!=false) {
      clearTimeout(euc_still_tmr);
      euc_far=0;
      euc_still=false;
      changeInterval(tmp.loop,100); 
    }
	//proximity auto lock 
    if (val.alock) {
    tmp.gatt.setRSSIHandler(function(rssi) {tmp.rssi=rssi; });
    if (tmp.rssi< -(val.far) && euc_still==true && val.lock==0) {
//      console.log("far start");
	  euc_far++;
	  euc_near=0;
	  if (euc_far > 8 && val.lock==0 ) {
		if (busy ) return;
     		busy = true;
			tmp.characteristic.writeValue(eval(cmd[21])).then(function() {
				val.lock=1;
				busy = false;
		        val.speedCol="13";
		        val.ampCol="13";
		        val.tempCol="13";
		        val.battCol="13";
				tmp.speed[0]="-1";
				tmp.speed[1]="-1";
				tmp.amp="-1";
				tmp.temp="-1";
				tmp.batt="-1";
				tmp.tripNow="-1";
				digitalPulse(w.pin.MOTOR,0,[90,60,90]);
			});
      }
	}else if  (tmp.rssi> -(val.near) && val.speed[0]<=5 && val.lock==1 ) {
		euc_far=0;
			if (busy ) return;
			busy = true;
			tmp.characteristic.writeValue(eval(cmd[22])).then(function() {
			  busy = false;
			  euc_near=0;
			  val.lock=0;
		        val.speedCol="0";
		        val.ampCol="0";
		        val.tempCol="11";
		        val.battCol="11";
				tmp.speed[0]="-1";
				tmp.speed[1]="-1";
				tmp.amp="-1";
				tmp.temp="-1";
				tmp.batt="-1";
				tmp.tripNow="-1";
			    digitalPulse(w.pin.MOTOR,0,100);
				console.log("unlock");
            });
	} else  { euc_far=0; euc_near=0; }
    }
	//send command
    if (busy ) return;
	//only alarms when locked
    if (val.lock==1 && tmp.count<=21 && val.speed[0]==0) {tmp.count=20;changeInterval(tmp.loop,2000);}
	//only get alarms-speed when still
//	else if (euc_still==true && tmp.count<19 ) {tmp.count=19;changeInterval(tmp.loop,500);}
    else if (euc_still==true && tmp.count<19 ) {changeInterval(tmp.loop,500);}
    else if  ( euc_still!=true && val.speed[0]<=2)  {changeInterval(tmp.loop,200);	}
	else if  (val.speed[0]>2 && fcurr==1)  {changeInterval(tmp.loop,50);}
    else if  (val.speed[0]>2 && fcurr!=1)  {changeInterval(tmp.loop,100);}
    console.log("l :"+tmp.count);
    busy = true;
//	if (tmp.cmd!=false) {
	tmp.characteristic.writeValue(eval(cmd[tmp.count])).then(function() {
      tmp.count++;
      if (tmp.count>=21) tmp.count=0;
      busy = false;
    });

  }, 100);  
  
}  
//exports
exports.on=start;
exports.off=stop;
exports.val=val;
exports.tmp=tmp;
exports.alert=alert;
});
  
euc=require("euc");  
//eval(require('Storage').read('euc'));

