Modules.addCached("euc",function(){

  
const val = {
  speed: ["0","0"], 
  speedCol:0,
  amp: "0", 
  ampCol: 0, 
  batt: "0", 
  battCol: 9, 
  temp: "0.0", 
  tempCol: 9, 
  tripCol: 0, 
  tripNow: "0.0", 
  tripLast: "0.0", 
  tripTotal: "0.0", 
  tripLeft: "0.0",
  aver:"0.0",
  averCol:"3",  
  time:"0",
  lock: 0,
  alarm: 0,
  conn: "OFF",
  alock: true,
  far: 87,
  near: 60,
  mac: "20:91:48:4c:49:d1 public", //enaon
//  mac: "88:C2:55:32:F6:5B public", //manowar
//  mac: "20:91:48:AB:2A:AD public", //megadeath
//  mac: "20:91:48:BC:91:3B public", //poet
};

const alert = {
  speed: 23,
  temp: 60,
  batt: 20,
  ampHigh: 18,
  ampLow: -6,
  on: false,
};


const tmp = {
  speed: ["0","0"], 
  amp: "0", 
  temp: "0", 
  batt: "0", 
  tripNow: "0",
  gatt:0,
  service:0,
  characteristic:0,

};



 
const cmd = [
    [85, 170, 3, 9, 1, 80, 2, 160, 255], //Current Amperage with sign if v[80] > 32768 I = v[80] - 65536 else I = v[80] in Amperes * 100
    [85, 170, 3, 9, 1, 38, 2, 202, 255], //Current Speed in Km/h*1000d
    [85, 170, 3, 9, 1, 62, 2, 178, 255], //Temperature numeric positive ยบC * 10
    [85, 170, 3, 9, 1, 80, 2, 160, 255], //amp
    [85, 170, 3, 9, 1, 38, 2, 202, 255], //speed
    [85, 170, 3, 9, 1, 71, 2, 169, 255], //Voltage numeric positive V * 100
    [85, 170, 3, 9, 1, 80, 2, 160, 255], //amp
    [85, 170, 3, 9, 1, 38, 2, 202, 255], //speed
   	[85, 170, 3, 9, 1, 185,2,  55, 255], //Single Mileage numeric positive in meters
    [85, 170, 3, 9, 1, 80, 2, 160, 255], //amp 
    [85, 170, 3, 9, 1, 38, 2, 202, 255], //speed
	[85, 170, 3, 9, 1, 58, 2 ,182, 255], //Single Runtime numeric positive seconds
	[85, 170, 3, 9, 1, 80, 2, 160, 255], //amp 
    [85, 170, 3, 9, 1, 38, 2, 202, 255], //speed
	[85, 170, 3, 9, 1, 37, 2, 203, 255], //remaining mileage in Km*100
	[85, 170, 3, 9, 1, 80, 2, 160, 255], //amp 
    [85, 170, 3, 9, 1, 38, 2, 202, 255], //speed
	[85, 170, 3, 9, 1, 182,2,  58, 255], //Average speed numeric positive m/h
	[85, 170, 3, 9, 1, 80, 2, 160, 255], //18-amp 
    [85, 170, 3, 9, 1, 38, 2, 202, 255], //19-speed
	[85, 170, 3, 9, 1, 112,2, 128, 255], //Lock status
//	[85, 170, 3, 9, 1, 178,1,  63, 255], //20-Flags bit 0 -> Limit Speed, bit 1 -> Lock , bit 2 -> Beep, bit 11 -> Activation. Bits from lower significance
	[85, 170, 3, 9, 3, 112,1, 127, 255], //21- lock
    [85, 170, 3, 9, 3, 112, 0,128, 255],  //22- unlock
];
    

 
function stop(){ 
  val.conn="OFF";
}

function start(){ 
  NRF.setTxPower(4);
  val.conn="ON";
  connect();
}

function connect(){

var euc_var;
var euc_al;
var euc_al_s;
var euc_al_a;
var euc_al_t;
var euc_al_b;
var tt=0;
var ts=0;
var ta=0;
var tr=0;
var tb=0;
var te=0; 
var tv=0; 
var tm=0; 
var tl=-1;  
tmp.speed[0]="-1";
tmp.speed[1]="-1";
tmp.amp="-1";
tmp.temp="-1";
tmp.batt="-1";
tmp.tripNow="-1";  
val.speedCol=0;

if (tmp.gatt.connected) {console.log("already running"); return;} 
NRF.connect(val.mac,{minInterval:7.5, maxInterval:7.5})
.then(function(g) {
  tmp.gatt = g;
  return tmp.gatt.getPrimaryService(0xffe0);
}).then(function(service) {
  tmp.service=service;
  return tmp.service.getCharacteristic(0xffe1);
}).then(function(characteristic) {
  tmp.characteristic=characteristic;
  tmp.characteristic.on('characteristicvaluechanged', function(event) {
  euc_var = event.target.value.getUint8(5, true);
  // if off button is pressed on euc
  if (euc_var==0) {
      //console.log("EUC_switched off");
	  val.conn="WAIT";
        w.vibrate(0.85,1,100,50);
//      setTimeout(() => { connect();}, 2500);
      return;
  //alarm
  }else if (euc_var==178) {
	  tmp[euc_var] = event.target.value.getUint8(6, true);

/*     if (Number(euc_val).toString(2)[1]==1 &&  euc_alarm==0) {
        euc_alarm=1; 
        //console.log("EUC_alarm :",euc_val);
        w.vibrate(0.85,3,250,50);
		if (fcurr==-1) {
			g.clear();	
            g.setFontVector(30);
			g.drawString("!",9, 30);
			g.flip();g.on();
			offid=setTimeout(() => {g.off();}, 2000);
		}
	    setTimeout(() => { euc_alarm=0; }, 100);
      }
*/
  // rest
  }else  {  
    tmp[euc_var]=event.target.value.getUint16(6, true);
    euc_al=0;
	//speed
	if (euc_var==38 && tmp[euc_var]!=ts) {
      val.speed=(tmp[euc_var]/1000).toFixed(1).toString().split('.');
		euc_al_s=false;	  
	  if (val.speed[0]>=alert.speed) {
		if (euc.val.speed[0]>=euc.alert.speed+5) val.speedCol=12;	
		else if (euc.val.speed[0]>=euc.alert.speed+2) val.speedCol=14;
		else val.speedCol=15;
		euc_al=(1+(val.speed[0]|0)-alert.speed);
		euc_al_s=true;
      } else val.speedCol=0;
      ts=tmp[euc_var];
    //amp
    }else  if (euc_var==80 && tmp[euc_var]!=ta) {
      if (tmp[80]>32768) val.amp=((tmp[80]-65536)/100).toFixed(1); 
      else val.amp=(tmp[euc_var]/100).toFixed(1);
	  euc_al_a=false;
	  if (val.amp>=alert.ampHigh) {
		if  (val.amp>=alert.ampHigh+5 ) val.ampCol=12;
		else val.ampCol=14;
		euc_al=(euc_al+1+(val.amp-alert.ampHigh))|0;
		euc_al_a=true;
	  }else if (val.amp>=10) { val.ampCol=13;
	  }else if ( val.amp<=alert.ampLow) {
		if  (val.amp<=alert.ampLow-5 ) val.ampCol=12;
		else  val.ampCol=14;
		euc_al=(euc_al+1+(-(val.amp-alert.ampLow)))|0;      
		euc_al_a=true;
	  }else if (val.amp<0) val.ampCol=15; else val.ampCol=0;
      ta=tmp[euc_var];
	//trip
    }else if (euc_var==185 && tmp[euc_var]!=tt) {
      if (val.tripNow > (tmp[euc_var]/100).toFixed(1)) {
        val.tripLast=Number(val.tripLast)+Number(val.tripNow);
        console.log("EUC_trip new :",val.tripLast);
      } 
      val.tripNow=(tmp[euc_var]/100).toFixed(1);
	  val.tripTotal=Number(val.tripLast)+Number(val.tripNow);
      tt=tmp[euc_var];
    //battery fixed
    }else  if (euc_var==71 && tmp[euc_var]!=tb) {
      val.batt=(((tmp[euc_var]/100)-51.5)*10|0); 
	  euc_al_t=false;
	  if ((euc.val.batt) >= 70) val.battCol=11;
      else  if ((val.batt) >= 40) val.battCol=13;
      else  if ((val.batt) >= alert.batt) val.battCol=14;
      else  {
		val.battCol=12;
		euc_al++;
		euc_al_b=true;
	  }
      tb=tmp[euc_var];
    //remaining
    }else if (euc_var==37 && tmp[euc_var]!=tr) {
      val.tripLeft=(tmp[euc_var]/100).toFixed(1);
      tr=tmp[euc_var];
     //temp
    }else if (euc_var==62 && tmp[euc_var]!=te) {
      val.temp=(tmp[euc_var]/10).toFixed(1);
      if (val.temp>=alert.temp ) {
		if (val.temp>=65) val.tempCol=12;
		else val.tempCol=14;
		euc_al++;
		euc_al_t=true;
	  } else if (val.temp>=50 ) val.tempCol=13; else val.tempCol=11;	  
      te=tmp[euc_var];
	 //average
    }else if (euc_var==182 && tmp[euc_var]!=tv) {
      val.aver=(tmp[euc_var]/1000).toFixed(1);
      tv=tmp[euc_var];
    }
	 //runtime
    else if (euc_var==58 && tmp[euc_var]!=tm) {
      val.time=(tmp[euc_var]/60).toFixed(0);
      tm=tmp[euc_var];
    } //lock
    else if (euc_var==112 && tmp[euc_var]!=tl) {
      val.lock=tmp[euc_var];
      tl=tmp[euc_var];
	  if (val.lock==1) {
		val.speedCol="13";
		val.ampCol="13";
		val.tempCol="13";
		val.battCol="13";
		val.tripCol="13";
		val.averCol="13";
        tmp.speed[0]="-1";
		tmp.speed[1]="-1";
		tmp.amp="-1";
		tmp.temp="-1";
		tmp.batt="-1";
		tmp.tripNow="-1";
      }else {
		tmp.speed[0]="-1";
		tmp.speed[1]="-1";
		tmp.amp="-1";
		tmp.temp="-1";
		tmp.batt="-1";
		tmp.tripNow="-1";
      }
    }
	//alerts
      if (euc_al!=0) {  
      if (alert.on!=true) {
        console.log("euc alarm :",euc_al);
         alert.on=true;
         w.vibrate(0.85,euc_al,100,100);  
         setTimeout(() => {alert.on=false; }, 1500);
      }
      }
    }

	});
  return tmp.characteristic.startNotifications();
}).then(function() {
  tmp.gatt.device.on('gattserverdisconnected', function(reason) {
    console.log("Disconnected :",reason);
    if (reason==8) {  console.log("reason is 8, starting"); setTimeout(() => {  connect(); }, 500);} 
  });
  //connected 
  console.log("EUC connected"); 
  val.conn="READY"; //connected
  tmp.count=22; //unlock
  w.vibrate(0.85,1,100,200);
  startWriting();
  
//reconect
}).catch(function(err)  {
  console.log("EUC", err);
  if (val.conn!="OFF") {
    console.log("not off");
    if ( err==="Connection Timeout"  )  {
	  if (typeof euc_rec_tmr !== "undefined") clearTimeout(euc_rec_tmr); 
	  console.log("retrying :timeout");
	  val.conn="LOST";
	  euc_rec_tmr=setTimeout(() => {
	    connect(); 
	  }, 10000);
	}else if ( err==="Disconnected"|| err==="Not connected")  {
	  if (typeof euc_rec_tmr !== "undefined") clearTimeout(euc_rec_tmr); 
      console.log("retrying :",err);
      val.conn="FAR";
      euc_rec_tmr=setTimeout(() => {
	    connect(); 
      }, 5000);
    }
    
  }
});
}

//main loop
function startWriting() {
 
  var euc_still_tmr=0;
  var euc_still=false;
  var busy = false;
  var euc_near=0;
  var euc_far=0;
//  tmp.gatt.setRSSIHandler(function(rssi) {var euc_rssi=rssi; });
  //gatt.setRSSIHandler();
  var i = setInterval(function() {
    if (busy  ) return;
    //console.log(euc_rssi);

    if (val.conn=="OFF") {
    clearInterval(i);
      console.log("EUC disconnected");
	  w.vib(90);
	  busy = true;
      var to=setTimeout(() => {tmp.gatt.disconnect();}, 1500);
	  tmp.characteristic.writeValue(cmd[21]).then(function() {
		clearTimeout(to);
	    clearInterval(i);
		busy = false;
		euc_far=0;
        setTimeout(w.vib,300,150);
		tmp.gatt.disconnect();
 		val.lock=1;
		});
      return;
    }else if (!tmp.gatt.connected)  {
     console.log("gatt disconnected");
      clearInterval(i);
      tmp.gatt.disconnect();
      //console.log("gatt disconnected");
      return; 
    }
	//check if still
    if (val.speed[0]==0 && euc_still==false) {
      euc_still=3;
      //console.log("still start");
      //if (typeof euc_still_tmr !== "undefined") {clearTimeout(euc_still_tmr);}
      euc_still_tmr=(setTimeout(() => { 
        euc_still=true;
        //console.log("still end");
      },5000));
    }else if (val.speed[0]>=1 && euc_still!=false) {
   	  //console.log("change interval 100 still false");
      clearTimeout(euc_still_tmr);
      //console.log("still stop");
      euc_far=0;
      euc_still=false;
      changeInterval(i,100); 
    }
	//proximity auto lock 
    if (val.alock) {
//    var euc_rssi;
    tmp.gatt.setRSSIHandler(function(rssi) {euc_rssi=rssi; });
//    console.log(euc_rssi);
    if (euc_rssi< -(val.far) && euc_still==true && val.lock==0) {
      console.log("far start");
	  euc_far++;
	  euc_near=0;
	  if (euc_far > 6 && val.lock==0 ) {
		if (busy ) return;
     		busy = true;
			tmp.characteristic.writeValue(cmd[21]).then(function() {
				val.lock=1;
				busy = false;
		        val.speedCol="13";
		        val.ampCol="13";
		        val.tempCol="13";
		        val.battCol="13";
		        val.tripCol="13";
		        val.averCol="13";
				tmp.speed[0]="-1";
				tmp.speed[1]="-1";
				tmp.amp="-1";
				tmp.temp="-1";
				tmp.batt="-1";
				tmp.tripNow="-1";
       
			});
      }
	}else if  (euc_rssi> -(val.near) && val.speed[0]<=5 && val.lock==1 ) {
		euc_far=0;
			if (busy ) return;
			busy = true;
			tmp.characteristic.writeValue(cmd[22]).then(function() {
			  busy = false;
			  euc_near=0;
			  val.lock=0;
		        val.speedCol="9";
		        val.ampCol="9";
		        val.tempCol="9";
		        val.battCol="9";
		        val.tripCol="9";
		        val.averCol="9";
				tmp.speed[0]="-1";
				tmp.speed[1]="-1";
				tmp.amp="-1";
				tmp.temp="-1";
				tmp.batt="-1";
				tmp.tripNow="-1";
			  //w.vibrate(0.85,1,100,100);
            });
	} else  { euc_far=0; euc_near=0; }
    }
	//send command
    if (busy ) return;
	//only alarms when locked
    if (val.lock==1 && tmp.count!=22 && val.speed[0]==0) {tmp.count=20;changeInterval(i,2000);}
	//only get alarms-speed when still
//	else if (euc_still==true && tmp.count<19 ) {tmp.count=19;changeInterval(i,500);}
	else if (euc_still==true && tmp.count<19 ) {changeInterval(i,500);}
    else if  ( euc_still!=true && val.speed[0]<=2)  {changeInterval(i,200);	}
	else if  (val.speed[0]>2 && fcurr==1)  {changeInterval(i,50);}
    else if  (val.speed[0]>2 && fcurr!=1)  {changeInterval(i,100);}
//    console.log("l :"+tmp.count);
    busy = true;
    tmp.characteristic.writeValue(cmd[tmp.count]).then(function() {
      tmp.count++;
      if (tmp.count>=21) tmp.count=0;
      busy = false;
    });

  }, 100);  
  
}  
//exports
exports.on=start;
exports.off=stop;
exports.val=val;
exports.tmp=tmp;
exports.alert=alert;
});
  
euc=require("euc");  
//eval(require('Storage').read('euc'));

