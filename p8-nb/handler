//p8 touch controller type
const type="TFK"; //TEH|TFK|TIN|-TIG not yet-
//face
var face={
  appCurr:"",
  appPrev:"off",
  pageCurr:-1,
  pagePrev:-1,	
  pageArg:"",
  offid:-1,
  offms:-1,
  go:function(app,page,arg){
    this.appPrev=this.appCurr;
	this.pagePrev=this.pageCurr;
    this.appCurr=app;
    this.pageCurr=page;
	if (this.pagePrev==-1&&w.gfx.isOn) {w.gfx.clear();w.gfx.off();}
    if (this.offid!=-1) {clearTimeout(this.offid);this.offid=-1;}
    if (this.pagePrev!=-1) face[this.pagePrev].clear();
  	if (this.pageCurr==-1 && this.pagePrev!=-1) {if (type=="TFK")tfk.loop=100;face[this.pagePrev].off();return;}
	if (app!=this.appPrev) eval(require('Storage').read(app));
    //set offtime
    this.offms=face[page].offms;
    this.offid=setTimeout((f)=>{
      if (f!=-1 && face[f].off) face[f].off();
      this.offid=-1;
      this.pageCurr=-1;
	  if (type!="TEH") i2c.writeTo(0x15,0xa5,3); 
	  if (type=="TFK") tfk.exit();
    },this.offms,this.pageCurr);
    //start face
    if (arg){
      face[page].init(arg);	
      if(!w.gfx.isOn) {
		  w.gfx.on();
		  if (type!="TEH") digitalPulse(w.pin.TP_RESET,1,[10,50]);
		  if (type=="TFK"){
			  tfk.loop=5;
			  if( tfk.tid==-1) tfk.init();
		  }
	  }
	  face[page].show(arg);
	  this.pageArg=arg;
	  return;
    }else{
      face[page].init();	
      if(!w.gfx.isOn) {
		  w.gfx.on();
		  if (type!="TEH") digitalPulse(w.pin.TP_RESET,1,[10,50]);
		  if (type=="TFK"){
			  tfk.loop=5;
			  if( tfk.tid==-1) tfk.init();
		  }
	  }
      face[page].show();
    }
  }
};
//charging notify
setWatch(function(s){
  var co;
  var g=w.gfx;
  if (s.state==1) {
	digitalPulse(w.pin.MOTOR,1,200); 
	co=col.raf;
  }else {
	digitalPulse(w.pin.MOTOR,1,[100,80,100]);
  	co=col.black;
  }
  if (face.pageCurr<0){
	if (face.offid==-1){ g.clear();g.flip();}
	g.setColor(0,col.lgray);
	g.fillRect(63,0,178,239);
	g.setColor(1,col.black);
	g.drawRect(100,58,140,89);
	g.drawRect(101,59,139,89);
	g.drawRect(102,60,138,88);
	g.drawRect(90,88,150,147);
	g.drawRect(91,89,149,146);
	g.drawRect(92,90,148,145);
	g.drawRect(104,145,137,166);
	g.drawRect(105,146,136,165);
	g.drawRect(106,147,135,164);
	g.drawRect(115,166,126,229);
	g.drawRect(116,166,125,228);
	g.drawRect(117,166,124,227);
	g.flip();
	g.setColor(1,co);
	g.fillRect(93,91,147,144);
   	g.setColor(0,col.black);
	g.flip();
	if (face.offid!==-1) clearTimeout(face.offid);
	  face.offid=setTimeout(()=>{
        g.clear();
		g.off();
		face.offid=-1;
      },2000);
	}  
    if(!g.isOn) g.on();
},w.pin.CHARGING,{repeat:true, debounce:500,edge:0});  
//settings 
var set={
  bt:0,
  cli:1,
  hid:0,
  atc:0,
  hidM:undefined,
  upd:function(){
	if (this.atc==0 && this.cli==0 && this.hid==0) {
		this.atcR=undefined;
		this.atcW=undefined;
		this.hidM=undefined;
 		NRF.disconnect();
        NRF.setServices(undefined, {uart : false});
        NRF.setAdvertising({}, { connectable:false }); 
   		NRF.sleep();
	} else {
		NRF.setAdvertising({}, { name:"enaonP8",connectable:true });
		if (set.hid==1 && typeof this.hidM =="undefined")  this.hidM = require("ble_hid_controls");//enable hid
		if (set.atc ==1) eval(require('Storage').read('atc'));
		else {
			NRF.setServices({}, {uart : Boolean(set.cli), hid:(set.hid)?this.hidM.report:undefined});
		    this.atcR=undefined;
		    this.atcW=undefined;
		}
		if (set.hid==0) this.hidM=undefined;
	}
  }
};
//ble state
NRF.on('disconnect',function() {
set.bt=0;
});  
//set.devices = [];
NRF.on('connect',function(addr) {
//  set.devices.push(addr);
set.bt=1;
});
//button 
var button;
var press=true;
var l1=-1;
var l2=-1;
function buttonHandler(s){
  if (global["\xFF"].watches[button]!="undefined") clearWatch(button);
  var p=w.pin.MOTOR;
  // button down
if (s.state==true) { 
    if ( l1 >=0) {clearTimeout(l1); l1=-1;}
    if ( l2 >=0) {clearTimeout(l2);l2=-1;}
    if ( face.offid >=0) {clearTimeout(face.offid);face.offid=-1;}
    press=true;
    //reset ble UART on long press
	l2=setTimeout(() => {
        if (digitalRead(BTN)==1) {
        NRF.setServices({},{uart:false});
        NRF.setServices({},{uart:true});  
		l2=setTimeout(() => {reset();}, 1000);
	    }
    }, 8000);
	//toggle EUC on long press
    l1=setTimeout(() => {
      if (typeof euc !== 'undefined' ) {
		euc.tgl();
        face.go("euc",0);
		press=false;
	  }
    }, 1000);
    button=setWatch(buttonHandler,BTN1, {repeat:false,debounce:10,edge:-1});
    return;
}else if (press==true && s.state==false)  { 
    if (l1 >=0) {clearTimeout(l1); l1=-1;}
    if ( l2 >=0) {clearTimeout(l2);l2=-1;}
	press=false;
	if (face.pageCurr==-1) 
		if (typeof euc !== 'undefined'){
			if (euc.conn!="OFF") face.go("euc",0);else face.go(face.appCurr,0);
		}else face.go(face.appCurr,0);
	else { 
      var to=face.pageCurr+1;
      if (to>=2) to=0;
      face.go(face.appCurr,to);
    }
} else {
    if ( l1 >=0) {clearTimeout(l1); l1=-1;}
    if ( l2 >=0) {clearTimeout(l2); l2=-1;}
}	
  button=setWatch(buttonHandler,BTN1, {repeat:false,debounce:10,edge:1});
}
button=setWatch(buttonHandler,BTN1, {repeat:false, debounce:10,edge:0});
//touch 
var touchHandler = {
  timeout: function(){
	if (face.offid>=0) {clearTimeout(face.offid); face.offid=-1;}
    face.offid=setTimeout((f)=>{
      if (f!=-1 && face[f].off) face[f].off();
      face.offid=-1;face.pagePrev=f;face.pageCurr=-1;
	  if (type!="TEH") i2c.writeTo(0x15,0xa5,3); 
	  if (type=="TFK") tfk.exit();
    },face.offms,face.pageCurr);
  }
};
//touch init
//var i2c=I2C1;
var i2c=new I2C();
i2c.setup({scl:w.pin.TP_SCL, sda:w.pin.TP_SDA, bitrate:100000});
digitalPulse(w.pin.TP_RESET,1,[5,50]);
var c;
if (type=="TEH"){
setWatch(function(s){
  var tp=i2c.readFrom(0x15,7);
console.log(tp);
  if (face.pageCurr>=0) touchHandler[face.pageCurr](tp[1],tp[4],tp[6]);
  else if (tp[1]==5) {
    if (s.time-c<0.25) face.go(face.appCurr,0);
    c=s.time;
  }else if (tp[1]==1) face.go(face.appCurr,0);
},w.pin.TP_INT,{repeat:true, edge:"rising"}); 
}else if (type=="TIN"){
var lt,xt,yt,tt,tf;
//var ct=0;
setWatch(function(s){
var tp=i2c.readFrom(0x15,7);
//console.log(tp);
if (face.pageCurr>=0) {
  if (tp[3]==0) {
	if (tt) {clearTimeout(tt);tt=0;}
    xt=tp[4];yt=tp[6];lt=1;st=1;tf=1;
	return;
  }else if (tp[1]==0 && tf) {
    var a;
    //ct++;
    //if (ct>2){
    a=5;
	if (tp[6]>=yt+30) a=1;
	else if (tp[6]<=yt-30) a=2;
	else if (tp[4]<=xt-30) a=3;
	else if (tp[4]>=xt+30) a=4;
//    console.log(tp[4],xt,tp[6],yt,a,ct);
   	if (tt) {clearTimeout(tt);tt=0;}
    if (a!=5){
      touchHandler[face.pageCurr](a,xt,yt);
      ct=0;
      tf=0;
	  return;
    } else {  
	tt=setTimeout(()=>{
       touchHandler[face.pageCurr](a,xt,yt);
		tt=0;ct=0;
        tf=0;
    },20);  
    }
    //}
    return;
  }else if (tp[1]==5) {
  if (tt) {clearTimeout(tt);tt=0;}
    touchHandler[face.pageCurr](5,tp[4],tp[6]);
    tf=0;
	return;
  }else if (tp[1]==12) {
 	if (tt) {clearTimeout(tt);tt=0;}
    if (lt) touchHandler[face.pageCurr](12,tp[4],tp[6]);
    lt=0;
    tf=0;
	return;
  }
}else {
  if(tp[3]==0) tf=1;
  if (tp[1]==5 && tf) {
    if (s.time-c<0.25) face.go(face.appCurr,0);
    c=s.time;tf=0;
  }else if (tp[1]==1 && tf) {face.go(face.appCurr,0);tf=0;}
}
},w.pin.TP_INT,{repeat:true, edge:"falling"}); 
}else if (type=="TFK"){
var tfk={
tid:-1,
x:0,
y:0,
do:0,
st:1,
loop:5,
init:function(){
	var tp=i2c.readFrom(0x15,7);
	if (tp[3]==128) {
        if (this.st) {
          if (face.pageCurr==-1){this.loop=5;face.go(face.appCurr,0);return;}
          this.st=0;
          this.do=1;
          this.x=tp[4];this.y=tp[6];
        }
        if (tp[1]==0 && this.do==1) {
            var a=0;
            if (tp[6]>=this.y+30) a=1;
	        else if (tp[6]<=this.y-30) a=2;
	        else if (tp[4]<=this.x-30) a=3;
	        else if (tp[4]>=this.x+30) a=4;
            if (a!=0) {
              this.do=0;
              touchHandler[face.pageCurr](a,this.x,this.y);
            }
        }else {
            if (tp[1]==5||tp[1]==12)touchHandler[face.pageCurr](tp[1],this.x,this.y);
        }
	}else if (tp[3]==255) this.st=1;
	this.tid=setTimeout(function(t){
		t.tid=-1;
		t.init();
	},this.loop,this);
},
exit:function(){
    if (this.tid>=0) clearTimeout(this.tid);
    this.tid=-1;
    return true;
}
};	
}
