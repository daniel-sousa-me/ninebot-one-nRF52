function KickWd(){
  if(!BTN1.read())E.kickWatchdog();
}
var wdint=setInterval(KickWd,1000);
E.enableWatchdog(6, false);

eval(require('Storage').read('dsd6')); //call ninebot
var nb_mac="20:91:48:4c:49:d1 public"; //enaon
//var nb_mac="88:C2:55:32:F6:5B public"; //manowar
//var nb_mac="20:91:48:AB:2A:AD public"; //megadeath

var nb_pass="2200022";

var nb_als=23; // speed in khm
var nb_alt=60; // temp in celcius
var nb_alah=18; // amps high
var nb_alal=-6;// amps regenerative
var nb_a;
var nb_s=["-","0"];

var clockFace = {
  offms: 3000,
  show : function(o){
    if (!this.run) return;
    var g=o.gfx;g.clear();
    var d=(Date()).toString().split(' ');
    var t=(d[4]).toString().split(':');
    function central(text, y) {
       g.drawString(text, (g.getWidth() - g.stringWidth(text))/2, y);
    }
       
    g.setFontVector(23);
    central(t[0],26);
    central(t[1],67);
    g.setFont8x16();
    central(".  .",49);
    central(this.v,2); 
    g.setFont7x11Numeric7Seg();
    central(d[2],100);
    g.setFontDylex7x13();
    central(d[0],118);
	g.drawRect(0, 0, 29, 17);
    g.drawRect(30, 4, 31, 12);
    o.flip();o.on();

    this.tid=setTimeout(function(t,o){
      t.tid=-1;
      t.show(o);
    },1000-Date().getMilliseconds(),this,o);
  },
  tid:-1,
  run:false,
  init: function(){
	this.v=(w.battVoltage()*100-365)*2|0;
    if (this.v>=100) this.v=100;
    this.run=true;
  },
  exit: function(o){
    this.run=false;
    if (this.tid>=0) clearTimeout(this.tid);
    this.tid=-1;
    return true;
  },
  off: function(o){
    this.exit(o);
  }
};

var nb_Main = {
  offms: 10000, //10 sec timeout
  show : function(o){
    var g=o.gfx;g.clear();
    var nb_m=(ninebot_185/100).toFixed(2);
    var nb_trip=((ninebot_185+ninebot_trip)/100).toFixed(2);
    if (ninebot_38>0) nb_s=(ninebot_38/1000).toFixed(1).toString().split('.');
    else if (nb_conn!=3) nb_s=["-","0"]; 
   	if (ninebot_lock && nb_conn!=3) nb_s=["L","-"]; 
    function central(text, y) {
       g.drawString(text, (g.getWidth() - g.stringWidth(text))/2, y);
    }
  
    if (nb_conn==1) {
      g.setFontVector(23);
      central(nb_s[0], 23); //speed 1
      if  (nb_a<=0){
      var nb_a_tmp=-nb_a;
      g.fillRect(0,70,31,91);
      o.gfx.setColor(0);
      g.setFontVector(19);central(nb_a_tmp, 71);
      o.gfx.setColor(1);
      } else if (nb_a<10) {g.setFontVector(19);central(nb_a, 71);} //amp
      else  {g.setFontVector(18); central(nb_a|0, 71);}//amp
      g.setFont7x11Numeric7Seg();
      central(ninebot_62/10, 55); //temp
	  g.drawCircle(29, 55, 2);
    } else if (nb_conn==3) {
      //nb_s=["SCAN"];
      g.setFontVector(12);
	  if (nb_s[0]=="LOST") g.setFontVector(11);
      central(nb_s[0], 40); //speed-state
      if (ninebot_lock) {central("L", 62);} //speed-state
    }  else if (nb_conn==2)  {
      nb_s=["Wait"];
      g.setFontVector(12);
      central(nb_s[0], 40); //speed-state      
    }  else if (nb_conn==0)  {
      nb_s=["OFF"];
      g.setFontVector(12);
      central(nb_s[0], 40); //speed-state 
      g.setFontVector(16);
      if (ninebot_lock) {central("L", 62);} //speed-state	  
    }   else if (nb_conn==4)  {
      nb_s=["ON"];
      g.setFontVector(16);
      central(nb_s[0], 40); //speed-state
    }
//    g.setFont8x16();
    //g.setFontVector(15);
     g.setFont("Teletext10x18Ascii",1);
    central((((ninebot_71/100)-51.5)*10|0), 0); //fixed bat
    g.drawLine(4,18,26,18);
    g.setFont7x11Numeric7Seg();
    central(nb_m, 97); //mileage
    central(nb_trip, 117); //mileage total
    g.drawLine(0,92,31,92);
    g.drawLine(0,112,31,112);
	
    o.flip();
     // schedule refresh 
    this.tid=setTimeout(function(t,o){
      t.tid=-1;
      t.show(o);
    },100,this,o);

  },
  
  exit: function(o){
    this.run=false;
    if (this.tid>=0) clearTimeout(this.tid);
    this.tid=-1;
    return true;
  },

  off: function(o){
    this.exit(o);
  }, 
  init: function(){
 //   this.page=0;
	o.on();
    
  }
};

var nb_Info = {
  offms: 30000, //30 sec timeout
  show : function(o){
    var g=o.gfx;g.clear();
    if (ninebot_38>0) nb_s=(ninebot_38/1000).toFixed(1).toString().split('.');
    else if (nb_conn!=3) nb_s=["-","0"]; 
   	if (ninebot_lock && nb_conn!=3) nb_s=["L","-"]; 
    function central(text, y) {
       g.drawString(text, (g.getWidth() - g.stringWidth(text))/2, y);
    }

    if (nb_conn==1) {
      g.setFontVector(23);
      central(nb_s[0], 25); //speed 1
//      g.setFontVector(16);
      g.setFont("Teletext10x18Ascii",1);
       central(nb_s[1], 57); //speed 1
    }  else if (nb_conn==0)  {
      nb_s=["OFF"];
      g.setFontVector(12);
      central(nb_s[0], 30); //speed-state  
      if (ninebot_lock) {g.setFontVector(16);central("L", 53);} //speed-state	
    } else if (nb_conn==3) {
      //nb_s=["SCAN"];
      g.setFontVector(10);
      central(nb_s[0], 30); //speed-state
    }  else if (nb_conn==2)  {
      nb_s=["Wait"];
      g.setFontVector(12);
      central(nb_s[0], 30); //speed-state        
    }   else if (nb_conn==4)  {
      nb_s=["ON"];
      g.setFontVector(12);
      central(nb_s[0], 37); //speed-state
    }
	
      if  (nb_a<=0){
        var nb_a_tmp=-nb_a;
        g.fillRect(0,80,31,104);
        o.gfx.setColor(0);
        g.setFontVector(19);central(nb_a_tmp, 82);
        o.gfx.setColor(1);
      } else if (nb_a<10) {g.setFontVector(19);central(nb_a, 82);} //amp
      else  {g.setFontVector(23); central(nb_a|0, 79);}//amp
//      g.setFontVector(13);
      g.setFont("Teletext10x18Ascii",1);
      central(ninebot_62, 114); //temp
      g.drawString(".",15,114);
//      g.setFontVector(15);
//      g.setFont("Teletext10x18Ascii",1);
      central((((ninebot_71/100)-51.5)*10|0), 0); //fixed bat
    g.drawLine(0,20,31,20);
    g.drawLine(0,79,31,79);
    g.drawLine(0,105,31,105);
	
    o.flip();o.on();
     // schedule refresh 
    this.tid=setTimeout(function(t,o){
      t.tid=-1;
      t.show(o);
    },100,this,o);

  },
  
  exit: function(o){
    this.run=false;
    if (this.tid>=0) clearTimeout(this.tid);
    this.tid=-1;
    return true;
  },

  off: function(o){
    this.exit(o);
  }, 
  init: function(){
    this.page=0;
  }
};

var nb_Info2 = {
  offms: 10000, //10 sec timeout
  show : function(o){
    var g=o.gfx;g.clear();

    function central(text, y) {
       g.drawString(text, (g.getWidth() - g.stringWidth(text))/2, y);
    }


      g.setFont("Teletext10x18Ascii",1);
//      central((ninebot_37/100).toFixed(1), 25); //speed 1
      central(ninebot_37/100|0, 25); //remaining mileage
      //g.setFont("7x11Numeric7Seg",1);

      central((ninebot_182/1000), 50); //average speed
      central("105", 80); //average speed

	  g.drawLine(0,20,31,20);
	  g.drawLine(0,79,31,79);
	  g.drawLine(0,105,31,105);
	
    o.flip();o.on();
     // schedule refresh 
    this.tid=setTimeout(function(t,o){
      t.tid=-1;
      t.show(o);
    },1000,this,o);

  },
  
  exit: function(o){
    this.run=false;
    if (this.tid>=0) clearTimeout(this.tid);
    this.tid=-1;
    return true;
  },

  off: function(o){
    this.exit(o);
  }, 
  init: function(){
    this.page=0;
  }
};


var w_up=false;
var press=true;
var dbl=0;
var offid=-1;
var offms=5000;
var fcurr=-1;
var fprev=-1;
var faces = [
  clockFace,
//  nb_Main,
  nb_Info,
  nb_Main,
//  nb_Info2,

];

function buttonHandler(s){

  if (digitalRead(BTN)==1) { 
  
	
    press=true;
    if (typeof l2 !== "undefined") {clearTimeout(l2);}
    if (typeof offid !== "undefined") {clearTimeout(offid);}
	
	if ( fcurr!=-1) {
	l2=setTimeout(() => {
        if (digitalRead(BTN)==1) {
        w.vibrate(0.85,2,400,100); 
        NRF.setServices({},{uart:false});
        NRF.setServices({},{uart:true});  
		l2=setTimeout(() => {reset();}, 1000);
        //reset();
	    }
    }, 5000);  
	}
    if ( fcurr==-1 && nb_conn==0) return;
	offid=setTimeout(() => {
      if (gatt.connected || nb_conn==3) {
        nb_conn=0; w.vibrate(0.85,2,100,50);
		if (typeof nb_rec_tmr !== "undefined") {clearTimeout(nb_rec_tmr); console.log("clear tmr");}
        o.setContrast(75);
        w.accWrite(0x18,0x41); //acc in standby mode
        w_up=false;
        if (fcurr!=-1){
        faces[fcurr].exit(); faces[fcurr].off();
        }
        fcurr=1;
        faces[fcurr].init();faces[fcurr].show(o);
        offid=setTimeout(() => { faces[fcurr].exit(); 
          faces[fcurr].off();o.off(); fcurr=-1; }, 1500);
        
      } else if (!gatt.connected && nb_conn!=4 && nb_conn!=3) {
        w.vibrate(0.85,1,100,600); ninebot(); nb_conn=4; 
        o.setContrast(150);
        w.accWrite(0x18,0xC1); //acc in tilt mode
        if (fcurr!=-1){
        faces[fcurr].exit(); faces[fcurr].off();
        }        
        fcurr=1;
        faces[fcurr].init();faces[fcurr].show(o);
        offid=setTimeout(() => { faces[fcurr].exit(); 
        faces[fcurr].off();o.off(); fcurr=-1; }, 8000);
       }
      press=false;
    }, 1000);
    
    return;
    
  }else if (press)  { 
    if (typeof l2 !== "undefined") {clearTimeout(l2);}
    if (typeof offid !== "undefined") {clearTimeout(offid);}

    if  (fcurr==-1 && w_up==false) {
      dbl++;
      setTimeout(() => {dbl=0;}, 300);
      if (dbl==2) { dbl=0;}
      else return;
    }
	var fshow=1;
    if (fcurr<0){
    // nothing active, make first one
    fprev=fcurr;
    fcurr=0;
    if (nb_conn!=0) fcurr=1;  
    if (faces[fcurr].init) faces[fcurr].init();
    } else {
    // ask active one to exit
    if (!faces[fcurr].exit || faces[fcurr].exit(o)){
      // ok exit from current face allowed
      fprev=fcurr;
      if(o.isOn) {
        fcurr++; if (fcurr >= faces.length) fcurr=0;
      } else fcurr=0;
      if (faces[fcurr].init) faces[fcurr].init();
      } else fshow=0;
    }
    if (offid>=0) clearTimeout(offid);
    var foffms=faces[fcurr].offms;
    offid=setTimeout((f)=>{
      if (f>=0 && faces[f].off) faces[f].off(o);
      o.off();offid=-1;fcurr=-1;
    },(foffms>0)?foffms:offms,fcurr);
    if (fshow) faces[fcurr].show(o);
  }
}

//setup
setTimeout(()=>{
  o.setContrast(100);
  o.off();
  o.setRotation(0); //vertical
  E.setPassword("1234");
//  E.lockConsole();
  w.vibrate(0.75,1,200,600);
  eval(require('Storage').read('ninebot')); //call ninebot
  //w.setClock("2020-04-19T04:29:02",0); //set time
  E.setTimeZone(3);
  setWatch(buttonHandler,BTN1, {repeat:true, debounce:10,edge:"both"});

   w.initAccel();
  w.accWrite(0x18,0x41); //standby mode
  //w.accWrite(0x18,0x45); //both tilt and tap
  //w.accWrite(0x19,0x3F);;//all three axes
  w.accWrite(0x19,0x10);//enable when face up
  w.accWrite(0x22,0x01);
  w.accWrite(0x32,0x0C); //22 degrees
  //w.accWrite(0x32,0x03); //6 degrees
  w.accWrite(0x1c,0x30);
  w.accWrite(0x1f,0x01);
  //w.accWrite(0x1f,0x05); //both tilt and tap
  //w.accWrite(0x18,0xC1); // operational mode tilt
  //w.accWrite(0x18,0xC5);//operational mode both tilt and tap
  w.accRegDump(0x17);
  
  setWatch(function(s){
  if (s.state){
  console.log((w.accRegDump(0x10)));
    var state=(w.accRegDump(0x10)).toString().split(' ');
	if (state[0]==16) {
     // w.accWrite(0x19,0x2f);
      w.accWrite(0x19,0x2c);
      w_up=true;
      if (typeof offid !== "undefined") {clearTimeout(offid);}
      if (fcurr==-1) { 
        press=true;
        buttonHandler();
      }
    }else {
       w.accWrite(0x19,0x10);
       w_up=false;
      if (fcurr!=-1) {  
      if (typeof offid !== "undefined") {clearTimeout(offid);}
      offid=setTimeout(() => { faces[fcurr].exit(); 
        faces[fcurr].off();o.off(); fcurr=-1; }, 2000);
    }
    }
    w.accRegDump(0x17);
  }
  },D15,true);  
  
  setWatch(function(s){
  if (digitalRead(D2)==1) 
  w.vibrate(0.85,1,200,600);
  else
  w.vibrate(0.85,2,100,100);
  },D2,true);  
  
},500);

setupSerial();// first set to known state
// now pause serial console for power saving, it will be enabled when RX goes high
// it should be enough to connect to serial adapter
pauseConsole(Serial1);

